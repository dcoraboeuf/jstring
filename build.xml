<project name="Release" default="release">
	
	<macrodef name="maven">
		<attribute name="goals" />
		<sequential>
			<exec executable="${mvn}" dir="${basedir}" failonerror="true">
				<arg line="-B" />
				<arg line="@{goals}" />
			</exec>
		</sequential>
	</macrodef>
	
	<macrodef name="update-versions">
		<attribute name="version" />
		<attribute name="context" />
		<sequential>
			<!-- Loads the POM -->
			<xmlproperty prefix="pom@{context}" keeproot="false" file="pom.xml" />
			<!-- Updates versions -->
			<echo message="Updating POM version(s) from ${pom@{context}.version} to @{version}" />
			<replaceregexp
				match="&lt;version&gt;${pom@{context}.version}&lt;/version&gt;"
				replace="&lt;version&gt;@{version}&lt;/version&gt;"
				byline="true">
				<fileset dir="${basedir}" includes="**/pom.xml" />
			</replaceregexp>
		</sequential>
	</macrodef>
	
	<target name="init">
	</target>
	
	<target name="init-prepare" depends="init">
		<!-- Checks required properties -->
		<fail message="'release.version' property must be set" unless="release.version" />
	</target>
	
	<target name="check-release-properties">
		<condition property="available.release.properties">
			<resourceexists>
				<file file="release.properties"/>
			</resourceexists>
		</condition>
	</target>
	
	<target name="init-release-properties" if="available.release.properties">
		<property file="release.properties" />
	</target>
	
	<target name="init-release" depends="check-release-properties,init-release-properties,init-prepare">
		<!-- Checks required properties -->
		<fail message="'mvn' property must be set to the Maven executable" unless="mvn" />
	</target>
	
	<target name="init-next" depends="init">
		<!-- Checks required properties -->
		<fail message="'release.next' property must be set" unless="release.next" />
	</target>
	
	<target name="init-publish" depends="check-release-properties,init-release-properties,init-release">
		<!-- Checks required properties -->
		<fail message="'sf.project' property must be set" unless="sf.project" />
		<fail message="'sf.project.path' property must be set" unless="sf.project.path" />
		<fail message="'sf.user' property must be set" unless="sf.user" />
		<fail message="'sf.password' property must be set" unless="sf.password" />
		<fail message="'oss.gpg.passphrase' property must be set" unless="oss.gpg.passphrase" />
	</target>
	
	<target name="init-all" depends="init-next,init-release,init-publish">
	</target>
	
	<target name="release-prepare" depends="init-prepare" unless="skip.prepare">
		<!-- Updates versions -->
		<update-versions version="${release.version}" context="tag" />
	</target>
	
	<target name="release-tag" depends="init" unless="skip.tag">
		<!-- Loads the POM as properties -->
		<xmlproperty file="pom.xml" />
		<!-- Committing the release -->
		<echo message="Committing the pom.xml with release ${release.version}" />
		<exec executable="hg" failonerror="true">
			<arg value="commit" />
			<arg value="--message" />
			<arg value="Release ${release.version}" />
		</exec>
		<!-- Creating the tag -->
		<echo message="Tagging with ${release.version}" />
		<exec executable="hg" failonerror="true">
			<arg value="tag" />
			<arg value="${release.version}" />
		</exec>
	</target>
	
	<target name="release-package" depends="init" unless="skip.package">
		<maven goals="clean deploy -P sonatype-oss-release -Dgpg.passphrase=${oss.gpg.passphrase}" />
	</target>
	


	<target name="release-publish-binaries" depends="init-publish" unless="skip.publish">
		<echo message="Publication" />
		<!-- Copies and flatten all JARs in a working directory -->
		<delete dir="target/scp-input" />
		<mkdir dir="target/scp-input" />
		<copy todir="target/scp-input" flatten="true">
		<fileset dir="${basedir}" includes="target/*.jar" />
		</copy>
		<!-- Publication of the JARs -->
		<echo message="Uploading binaries to ${sf.user},${sf.project}@web.sourceforge.net:/home/frs/project/${sf.project.path}/${release.version}" />
		<scp
			todir="${sf.user},${sf.project}@web.sourceforge.net:/home/frs/project/${sf.project.path}/${release.version}"
			password="${sf.password}"
			verbose="true"
			sftp="true"
			trust="true">
			<fileset dir="target/scp-input" includes="*.jar" />
		</scp>
	</target>
	
	<target name="release-publish-javadoc" depends="init-publish,release-javadoc" unless="skip.publish">
		<!-- ZIP all Javadoc -->
		<zip destfile="target/site/apidocs.zip">
			<fileset dir="target/site" includes="apidocs/**" />
		</zip>
		<!-- Upload of the Javadoc ZIP -->
		<echo message="Uploading Javadoc to ${sf.user},${sf.project}@web.sourceforge.net:/home/project-web/${sf.project}/htdocs" />
		<scp
			todir="${sf.user},${sf.project}@web.sourceforge.net:/home/project-web/${sf.project}/htdocs"
			file="target/site/apidocs.zip"
			password="${sf.password}"
			verbose="true"
			sftp="true"
			trust="true">
		</scp>
		<!-- Deploying the doc -->
		<sshexec
			host="shell.sourceforge.net"
			username="${sf.user},${sf.project}"
			password="${sf.password}"
			trust="true"
			verbose="true"
			commandResource="javadoc.sh" />
	</target>
	
	<target name="release-publish" depends="release-publish-binaries,release-publish-javadoc">
	</target>

	<target name="release-javadoc" depends="init" unless="skip.javadoc">
		<maven goals="javadoc:aggregate -P Javadoc" />
	</target>

	
	<target name="release-tasks" depends="release-package,release-javadoc,release-publish" unless="skip.tasks">
	</target>
	
	<target name="release-next" depends="init-next" unless="skip.next">
		<!-- Updates versions -->
		<update-versions version="${release.next}-SNAPSHOT" context="next" />
		<!-- Commits -->
		<echo message="Committing the pom.xml with next version ${release.next}" />
		<exec executable="hg" failonerror="true">
			<arg value="commit" />
			<arg value="--message" />
			<arg value="Starting development of ${release.next}" />
		</exec>
	</target>
	
	<!-- Releases only -->
	<target name="release-only" depends="init-all,release-prepare,release-tasks,release-tag">
	</target>
	
	<!-- Release and prepare the next development iteration -->
	<target name="release" depends="release-only,release-next">
	</target>

</project>
